# HG changeset patch
# Date 1627544004 -10800
#      Thu Jul 29 10:33:24 2021 +0300
# Branch conda
# Node ID 729ac336ae0c7408d4df2f31854e37c2aeb65199
# Parent  c68d0ee004b4f95e9cea70196c200b86b605a093
support multiple tags in hg_archive, fixes platform._sys_version()

diff -r c68d0ee004b4 -r 729ac336ae0c rpython/tool/test/test_version.py
--- a/rpython/tool/test/test_version.py
+++ b/rpython/tool/test/test_version.py
@@ -2,18 +2,21 @@
 from rpython.tool.version import get_repo_version_info, _get_hg_archive_version
 
 def test_hg_archival_version(tmpdir):
-    def version_for(name, **kw):
+    def version_for(name, items):
         path = tmpdir.join(name)
-        path.write('\n'.join('%s: %s' % x for x in kw.items()))
+        path.write('\n'.join(('%s: %s' % (tag,value) for tag,value in items)))
         return _get_hg_archive_version(str(path))
 
     assert version_for('release',
-                       tag='release-123',
-                       node='000',
+                       (('tag', 'release-123'),
+                        ('tag', 'ignore-me'),
+                        ('node', '000'),
+                       ),
                       ) == ('release-123', '000')
     assert version_for('somebranch',
-                       node='000',
-                       branch='something',
+                       (('node', '000'),
+                        ('branch', 'something'),
+                       ),
                       ) == ('something', '000')
 
 
diff -r c68d0ee004b4 -r 729ac336ae0c rpython/tool/version.py
--- a/rpython/tool/version.py	Wed Jul 28 17:08:57 2021 +0300
+++ b/rpython/tool/version.py	Thu Jul 29 10:33:24 2021 +0300
@@ -84,11 +84,10 @@
 
 
 def _get_hg_archive_version(path):
-    fp = open(path)
-    try:
-        data = dict(x.split(': ', 1) for x in fp.read().splitlines())
-    finally:
-        fp.close()
+    with open(path) as fp:
+        # reverse the order since there may be more than one tag
+        # and the latest tag will be first, so make it last instead
+        data = dict(x.split(': ', 1) for x in fp.read().splitlines()[::-1])
     if 'tag' in data:
         return data['tag'], data['node']
     else:
