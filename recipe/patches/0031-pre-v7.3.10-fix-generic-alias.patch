diff -r 05fbe3aa5b08 lib_pypy/_contextvars.py
--- a/lib_pypy/_contextvars.py	Tue Mar 29 08:15:20 2022 +0300
+++ b/lib_pypy/_contextvars.py	Tue Apr 05 07:32:45 2022 +0300
@@ -162,9 +162,8 @@
 
         token._used = True
 
-    @classmethod
-    def __class_getitem__(self, key):
-        return self
+    def __class_getitem__(self, item):
+        return GenericAlias(self, item)
 
     def __repr__(self):
         default = ''
diff -r 05fbe3aa5b08 lib_pypy/_ctypes/structure.py
--- a/lib_pypy/_ctypes/structure.py	Tue Mar 29 08:15:20 2022 +0300
+++ b/lib_pypy/_ctypes/structure.py	Tue Apr 05 07:32:45 2022 +0300
@@ -4,7 +4,7 @@
      store_reference, ensure_objects, CArgObject
 from _ctypes.array import Array, swappedorder, byteorder
 from _ctypes.pointer import _Pointer
-import inspect, __pypy__
+import __pypy__
 
 
 def names_and_fields(self, _fields_, superclass, anonymous_fields=None):
@@ -28,7 +28,7 @@
                 raise TypeError('bit fields not allowed for type ' + tp.__name__)
 
     all_fields = []
-    for cls in reversed(inspect.getmro(superclass)):
+    for cls in reversed(superclass.__mro__):
         # The first field comes from the most base class
         all_fields.extend(getattr(cls, '_fields_', []))
     all_fields.extend(_fields_)
diff -r 05fbe3aa5b08 lib_pypy/_pypy_generic_alias.py
--- a/lib_pypy/_pypy_generic_alias.py	Tue Mar 29 08:15:20 2022 +0300
+++ b/lib_pypy/_pypy_generic_alias.py	Tue Apr 05 07:32:45 2022 +0300
@@ -10,20 +10,35 @@
 ))
 
 class GenericAlias:
+
+    __slots__ = ("__weakref__", "_origin", "_args", "_parameters", "_hash")
+
     def __new__(cls, origin, args):
         result = super(GenericAlias, cls).__new__(cls)
         if not isinstance(args, tuple):
             args = (args, )
-        result.__origin__ = origin
-        result.__args__ = args
-        result.__parameters__ = _make_parameters(args)
+        result._origin = origin
+        result._args = args
+        result._parameters = _make_parameters(args)
         return result
 
+    @property
+    def __origin__(self):
+        return object.__getattribute__(self, "_origin")
+
+    @property
+    def __args__(self):
+        return object.__getattribute__(self, "_args")
+
+    @property
+    def __parameters__(self):
+        return object.__getattribute__(self, "_parameters")
+
     def __call__(self, *args, **kwargs):
         result = self.__origin__(*args, **kwargs)
         try:
             result.__orig_class__ = self
-        except AttributeError:
+        except (AttributeError, TypeError):
             pass
         return result
 
@@ -68,9 +83,9 @@
         return hash(self.__origin__) ^ hash(self.__args__)
 
     def __dir__(self):
-        res = dir(self.__origin__)
-        res.extend(_ATTR_EXCEPTIONS)
-        return res
+        cls = type(self)
+        dir_origin = set(dir(self.__origin__))
+        return sorted(_ATTR_EXCEPTIONS | dir_origin)
 
     def __subclasscheck__(self, other):
         raise TypeError("issubclass() argument 2 cannot be a parameterized generic")
@@ -84,6 +99,8 @@
 def _repr_item(it):
     if it == Ellipsis:
         return "..."
+    if type(it) is GenericAlias:
+        return repr(it)
     try:
         qualname = getattr(it, "__qualname__")
         module = getattr(it, "__module__")
