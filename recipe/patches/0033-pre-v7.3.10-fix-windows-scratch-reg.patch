diff -r 18296429103c -r be7b113b4530 rpython/jit/backend/x86/regalloc.py
--- a/rpython/jit/backend/x86/regalloc.py	Sat May 28 18:10:26 2022 +0200
+++ b/rpython/jit/backend/x86/regalloc.py	Sun May 29 07:36:20 2022 +0300
@@ -128,6 +128,7 @@
 class X86_64_WIN_XMMRegisterManager(X86_64_XMMRegisterManager):
     # xmm15 reserved for scratch use
     all_regs = [xmm0, xmm1, xmm2, xmm3, xmm4]
+    save_around_call_regs = all_regs
 
 class X86FrameManager(FrameManager):
     def __init__(self, base_ofs):
@@ -1326,11 +1327,7 @@
         # Do we have a temp var?
         if IS_X86_64:
             tmpreg = X86_64_SCRATCH_REG
-            if WIN64:
-                # XXX perhaps use this for all_regs and do xmmtmp = None?
-                xmmtmp = xmm5
-            else:
-                xmmtmp = X86_64_XMM_SCRATCH_REG
+            xmmtmp = X86_64_XMM_SCRATCH_REG
         else:
             tmpreg = None
             xmmtmp = None
diff -r 18296429103c -r be7b113b4530 rpython/jit/backend/x86/reghint.py
--- a/rpython/jit/backend/x86/reghint.py	Sat May 28 18:10:26 2022 +0200
+++ b/rpython/jit/backend/x86/reghint.py	Sun May 29 07:36:20 2022 +0300
@@ -14,6 +14,7 @@
      SAVE_GCREF_REGS, SAVE_ALL_REGS)
 
 from rpython.jit.backend.x86.regalloc import (
+    gpr_reg_mgr_cls, xmm_reg_mgr_cls, compute_gc_level,
     X86RegisterManager, X86XMMRegisterManager,
     X86_64_RegisterManager, X86_64_XMMRegisterManager, compute_gc_level
 )
@@ -171,8 +172,6 @@
         oplist[num] = value
 
 class CallHints32(object):
-    RegisterManager = X86RegisterManager
-    XMMRegisterManager = X86XMMRegisterManager
 
     def _block_non_caller_save(self, position, save_all_regs, hinted_gpr=None, hinted_xmm=None):
         if hinted_gpr is None:
@@ -182,15 +181,15 @@
         # block all remaining registers that are not caller save
 
         # XXX the case save_all_regs == SAVE_GCREF_REGS
-        # (save callee-save regs + gc ptrs) is no expressible atm
+        # (save callee-save regs + gc ptrs) is not expressible atm
         if save_all_regs == SAVE_ALL_REGS:
-            regs = self.RegisterManager.all_regs
+            regs = gpr_reg_mgr_cls.all_regs
         else:
-            regs = self.RegisterManager.save_around_call_regs
+            regs = gpr_reg_mgr_cls.save_around_call_regs
         for reg in regs:
             if reg not in hinted_gpr:
                 self.longevity.fixed_register(position, reg)
-        for reg in self.XMMRegisterManager.all_regs:
+        for reg in xmm_reg_mgr_cls.all_regs:
             if reg not in hinted_xmm:
                 self.longevity.fixed_register(position, reg)
 
@@ -202,9 +201,6 @@
     ARGUMENTS_GPR = callbuilder.CallBuilder64.ARGUMENTS_GPR
     ARGUMENTS_XMM = callbuilder.CallBuilder64.ARGUMENTS_XMM
 
-    RegisterManager = X86_64_RegisterManager
-    XMMRegisterManager = X86_64_XMMRegisterManager
-
     def __init__(self, longevity):
         self.longevity = longevity
 
diff -r 18296429103c -r be7b113b4530 rpython/jit/backend/x86/regloc.py
--- a/rpython/jit/backend/x86/regloc.py	Sat May 28 18:10:26 2022 +0200
+++ b/rpython/jit/backend/x86/regloc.py	Sun May 29 07:36:20 2022 +0300
@@ -1,7 +1,7 @@
 from rpython.jit.metainterp.history import ConstInt
 from rpython.jit.backend.x86 import rx86
 from rpython.rlib.unroll import unrolling_iterable
-from rpython.jit.backend.x86.arch import WORD, IS_X86_32, IS_X86_64
+from rpython.jit.backend.x86.arch import WORD, IS_X86_32, IS_X86_64, WIN64
 from rpython.tool.sourcetools import func_with_new_name
 from rpython.rlib.objectmodel import specialize, instantiate
 from rpython.rlib.rarithmetic import intmask, r_uint
@@ -353,7 +353,10 @@
 
 # XXX: a GPR scratch register is definitely needed, but we could probably do
 # without an xmm scratch reg.
-X86_64_XMM_SCRATCH_REG = xmm15
+if WIN64:
+    X86_64_XMM_SCRATCH_REG = xmm5
+else:
+    X86_64_XMM_SCRATCH_REG = xmm15
 
 # note: 'r' is after 'i' in this list, for _binaryop()
 unrolling_location_codes = unrolling_iterable(list("irbsmajx"))
